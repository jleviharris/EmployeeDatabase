{"ast":null,"code":"import Axios from \"axios\";\n\n///////////////   EMPLOYEES   ///////////////\n\n//Add a new employee\nconst addEmployee = (name, age, country, position, wage, managerID, setEmployeeList, employeeList) => {\n  // https://employeedatabasesql.herokuapp.com\n\n  Axios.post(\"/create\", {\n    name: name,\n    age: age,\n    country: country,\n    position: position,\n    wage: wage,\n    manager: managerID\n  }).then(() => {\n    setEmployeeList([...employeeList, {\n      name: name,\n      age: age,\n      country: country,\n      position: position,\n      wage: wage,\n      manager: managerID\n    }]);\n  }).catch(error => {\n    console.log(error.response);\n  });\n};\n\n//Get all employees unordered\nconst getEmployees = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employees\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n\n//Get all employees ordered by name ASC\nconst getEmployeesName = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesName\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n\n//Get all employees ordered by name DESC\nconst getEmployeesNameDesc = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesNameDesc\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n\n//Get all employees ordered by age ASC\nconst getEmployeesAge = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesAge\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by age DESC\nconst getEmployeesAgeDesc = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesAgeDesc\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by country ASC\nconst getEmployeesCountry = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesCountry\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by country DESC\nconst getEmployeesCountryDesc = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesCountryDesc\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by position ASC\nconst getEmployeesPosition = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesPosition\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by position DESC\nconst getEmployeesPositionDesc = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesPositionDesc\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by wage ASC\nconst getEmployeesWage = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesWage\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by wage DESC\nconst getEmployeesWageDesc = setEmployeeList => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesWageDesc\").then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a name\nconst getName = (name, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/name/${name}`).then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching an age\nconst getAge = (age, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/age/${age}`).then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a country\nconst getCountry = (country, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/country/${country}`).then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a position\nconst getPosition = (position, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/position/${position}`).then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a wage\nconst getWage = (wage, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/wage/${wage}`).then(response => {\n    setEmployeeList(response.data);\n  });\n};\n//Update an employees name\nconst updateEmployeeName = (id, newName, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateName\", {\n    name: newName,\n    id: id\n  }).then(response => {\n    setEmployeeList(employeeList.map(val => {\n      return val.id == id ? {\n        id: val.id,\n        name: newName,\n        country: val.country,\n        age: val.age,\n        position: val.position,\n        wage: val.wage\n      } : val;\n    }));\n  });\n};\n//Update an employees age\nconst updateEmployeeAge = (id, newAge, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateAge\", {\n    age: newAge,\n    id: id\n  }).then(response => {\n    setEmployeeList(employeeList.map(val => {\n      return val.id == id ? {\n        id: val.id,\n        name: val.name,\n        country: val.country,\n        age: newAge,\n        position: val.position,\n        wage: val.wage\n      } : val;\n    }));\n  });\n};\n//Update an employees country\nconst updateEmployeeCountry = (id, newCountry, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateCountry\", {\n    country: newCountry,\n    id: id\n  }).then(response => {\n    setEmployeeList(employeeList.map(val => {\n      return val.id == id ? {\n        id: val.id,\n        name: val.name,\n        country: newCountry,\n        age: val.age,\n        position: val.position,\n        wage: val.wage\n      } : val;\n    }));\n  });\n};\n//Update an employees position\nconst updateEmployeePosition = (id, newPosition, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updatePosition\", {\n    position: newPosition,\n    id: id\n  }).then(response => {\n    setEmployeeList(employeeList.map(val => {\n      return val.id == id ? {\n        id: val.id,\n        name: val.name,\n        country: val.country,\n        age: val.age,\n        position: newPosition,\n        wage: val.wage\n      } : val;\n    }));\n  });\n};\n//Update an employees wage\nconst updateEmployeeWage = (id, newWage, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateWage\", {\n    wage: newWage,\n    id: id\n  }).then(response => {\n    setEmployeeList(employeeList.map(val => {\n      return val.id == id ? {\n        id: val.id,\n        name: val.name,\n        country: val.country,\n        age: val.age,\n        position: val.position,\n        wage: newWage\n      } : val;\n    }));\n  });\n};\n//Update an employees supervisor\nconst updateEmployeeSupervisor = (id, newManager, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateSupervisor\", {\n    wage: newManager,\n    id: id\n  }).then(response => {\n    setEmployeeList(employeeList.map(val => {\n      return val.id == id ? {\n        id: val.id,\n        name: val.name,\n        country: val.country,\n        age: val.age,\n        position: val.position,\n        wage: val.wage,\n        manager: newManager\n      } : val;\n    }));\n  });\n};\n//Delete an employee\nconst deleteEmployee = (id, setEmployeeList, employeeList) => {\n  Axios.delete(`https://employeedatabasesql.herokuapp.com/delete/${id}`).then(response => {\n    setEmployeeList(employeeList.filter(val => {\n      return val.id != id;\n    }));\n  });\n};\n\n//////////////    MANAGERS   //////////////////\n\n//Add a new manager\nconst addManager = (firstName, lastName, empID, setManagerList, managerList, title) => {\n  Axios.post(\"https://employeedatabasesql.herokuapp.com/createManager\", {\n    first_name: firstName,\n    last_name: lastName,\n    emp_id: empID,\n    title: title\n  }).then(() => {\n    setManagerList([...managerList, {\n      first_name: firstName,\n      last_name: lastName,\n      emp_id: empID,\n      title: title\n    }]);\n  }).catch(error => {\n    console.log(error.response);\n  });\n};\n\n//Get all managers unordered\nconst getManagers = setManagerList => {\n  Axios.get(\"/managers\").then(response => {\n    setManagerList(response.data);\n  });\n};\n\n//Get all managers ordered by first_name ASC\nconst getManagerFirstName = setManagerList => {\n  Axios.get(\"/managerFirstName\").then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by first_name DESC\nconst getManagerFirstNameDesc = setManagerList => {\n  Axios.get(\"/managerFirstNameDesc\").then(response => {\n    setManagerList(response.data);\n  });\n};\n\n//Get all managers ordered by last_name\nconst getManagerLastName = setManagerList => {\n  Axios.get(\"/managerLastName\").then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by last_name DESC\nconst getManagerLastNameDesc = setManagerList => {\n  Axios.get(\"/managerLastNameDesc\").then(response => {\n    setManagerList(response.data);\n  });\n};\n\n//Get all managers ordered by emp_id ASC\nconst getManagersEmpID = setManagerList => {\n  Axios.get(\"/managersID\").then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by emp_id DESC\nconst getManagersEmpIDDesc = setManagerList => {\n  Axios.get(\"/managersIDDesc\").then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by title ASC\nconst getManagersTitle = setManagerList => {\n  Axios.get(\"/managersTitle\").then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by title DESC\nconst getManagersTitleDesc = setManagerList => {\n  Axios.get(\"/managersTitleDesc\").then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get managers by searching a first name\nconst getFirstName = (firstName, setManagerList) => {\n  Axios.get(`/firstName/${firstName}`).then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get managers by searching last name\nconst getLastName = (lastName, setManagerList) => {\n  Axios.get(`/lastName/${lastName}`).then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get employees by searching a ID\nconst getID = (id, setManagerList) => {\n  Axios.get(`/id/${id}`).then(response => {\n    setManagerList(response.data);\n  });\n};\n//Get manager by searching a title\nconst getTitle = (title, setManagerList) => {\n  Axios.get(`/title/${title}`).then(response => {\n    setManagerList(response.data);\n  });\n};\n//Update a manager first name\nconst updateManagerFirstName = (manager_id, newFirstName, setManagerList, managerList) => {\n  Axios.put(\"/updateManagerFirstName\", {\n    first_name: newFirstName,\n    manager_id: manager_id\n  }).then(response => {\n    setManagerList(managerList.map(val => {\n      return val.manager_id == manager_id ? {\n        manager_id: val.manager_id,\n        first_name: newFirstName,\n        last_name: val.last_name,\n        emp_id: val.emp_id,\n        title: val.title\n      } : val;\n    }));\n  });\n};\n// Update manager last name\nconst updateManagerLastName = (manager_id, newLastName, setManagerList, managerList) => {\n  Axios.put(\"/updateManagerLastName\", {\n    last_name: newLastName,\n    manager_id: manager_id\n  }).then(response => {\n    setManagerList(managerList.map(val => {\n      return val.manager_id == manager_id ? {\n        manager_id: val.manager_id,\n        first_name: val.first_name,\n        last_name: newLastName,\n        emp_id: val.emp_id,\n        title: val.title\n      } : val;\n    }));\n  });\n};\nconst updateManagerTitle = (manager_id, newTitle, setManagerList, managerList) => {\n  Axios.put(\"/updateManagerTitle\", {\n    title: newTitle,\n    manager_id: manager_id\n  }).then(response => {\n    setManagerList(managerList.map(val => {\n      return val.manager_id == manager_id ? {\n        manager_id: val.manager_id,\n        first_name: val.first_name,\n        last_name: val.last_name,\n        emp_id: val.emp_id,\n        title: newTitle\n      } : val;\n    }));\n  });\n};\n\n// Delete a manager\nconst deleteManager = (id, setManagerList, managerList) => {\n  Axios.delete(`/deleteManager/${id}`).then(response => {\n    setManagerList(managerList.filter(val => {\n      return val.id != id;\n    }));\n  });\n};\nconst AxiosRoutes = {\n  addEmployee,\n  getEmployees,\n  getEmployeesName,\n  getEmployeesNameDesc,\n  getEmployeesAge,\n  getEmployeesAgeDesc,\n  getEmployeesCountry,\n  getEmployeesCountryDesc,\n  getEmployeesPosition,\n  getEmployeesPositionDesc,\n  getEmployeesWage,\n  getEmployeesWageDesc,\n  getName,\n  getAge,\n  getCountry,\n  getPosition,\n  getWage,\n  updateEmployeeName,\n  updateEmployeeAge,\n  updateEmployeeCountry,\n  updateEmployeePosition,\n  updateEmployeeWage,\n  updateEmployeeSupervisor,\n  deleteEmployee,\n  addManager,\n  getManagers,\n  getManagerFirstName,\n  getManagerFirstNameDesc,\n  getManagerLastName,\n  getManagerLastNameDesc,\n  getManagersEmpID,\n  getManagersEmpIDDesc,\n  getManagersTitle,\n  getManagersTitleDesc,\n  getFirstName,\n  getLastName,\n  getID,\n  getTitle,\n  updateManagerTitle,\n  updateManagerFirstName,\n  updateManagerLastName,\n  deleteManager\n};\nexport default AxiosRoutes;","map":{"version":3,"names":["Axios","addEmployee","name","age","country","position","wage","managerID","setEmployeeList","employeeList","post","manager","then","catch","error","console","log","response","getEmployees","get","data","getEmployeesName","getEmployeesNameDesc","getEmployeesAge","getEmployeesAgeDesc","getEmployeesCountry","getEmployeesCountryDesc","getEmployeesPosition","getEmployeesPositionDesc","getEmployeesWage","getEmployeesWageDesc","getName","getAge","getCountry","getPosition","getWage","updateEmployeeName","id","newName","put","map","val","updateEmployeeAge","newAge","updateEmployeeCountry","newCountry","updateEmployeePosition","newPosition","updateEmployeeWage","newWage","updateEmployeeSupervisor","newManager","deleteEmployee","delete","filter","addManager","firstName","lastName","empID","setManagerList","managerList","title","first_name","last_name","emp_id","getManagers","getManagerFirstName","getManagerFirstNameDesc","getManagerLastName","getManagerLastNameDesc","getManagersEmpID","getManagersEmpIDDesc","getManagersTitle","getManagersTitleDesc","getFirstName","getLastName","getID","getTitle","updateManagerFirstName","manager_id","newFirstName","updateManagerLastName","newLastName","updateManagerTitle","newTitle","deleteManager","AxiosRoutes"],"sources":["/Users/jonathanharris/Desktop/code/PersonalProjects/DataProject/client/src/Routes/AxiosRoutes.js"],"sourcesContent":["import Axios from \"axios\";\n\n///////////////   EMPLOYEES   ///////////////\n\n//Add a new employee\nconst addEmployee = (\n  name,\n  age,\n  country,\n  position,\n  wage,\n  managerID,\n  setEmployeeList,\n  employeeList\n) => {\n  // https://employeedatabasesql.herokuapp.com\n\n  Axios.post(\"/create\", {\n    name: name,\n    age: age,\n    country: country,\n    position: position,\n    wage: wage,\n    manager: managerID,\n  })\n    .then(() => {\n      setEmployeeList([\n        ...employeeList,\n        {\n          name: name,\n          age: age,\n          country: country,\n          position: position,\n          wage: wage,\n          manager: managerID,\n        },\n      ]);\n    })\n    .catch((error) => {\n      console.log(error.response);\n    });\n};\n\n//Get all employees unordered\nconst getEmployees = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employees\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n\n//Get all employees ordered by name ASC\nconst getEmployeesName = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesName\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n\n//Get all employees ordered by name DESC\nconst getEmployeesNameDesc = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesNameDesc\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n\n//Get all employees ordered by age ASC\nconst getEmployeesAge = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesAge\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by age DESC\nconst getEmployeesAgeDesc = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesAgeDesc\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by country ASC\nconst getEmployeesCountry = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesCountry\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by country DESC\nconst getEmployeesCountryDesc = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesCountryDesc\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by position ASC\nconst getEmployeesPosition = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesPosition\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by position DESC\nconst getEmployeesPositionDesc = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesPositionDesc\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by wage ASC\nconst getEmployeesWage = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesWage\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get all employees ordered by wage DESC\nconst getEmployeesWageDesc = (setEmployeeList) => {\n  Axios.get(\"https://employeedatabasesql.herokuapp.com/employeesWageDesc\").then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a name\nconst getName = (name, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/name/${name}`).then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching an age\nconst getAge = (age, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/age/${age}`).then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a country\nconst getCountry = (country, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/country/${country}`).then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a position\nconst getPosition = (position, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/position/${position}`).then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Get employees by searching a wage\nconst getWage = (wage, setEmployeeList) => {\n  Axios.get(`https://employeedatabasesql.herokuapp.com/wage/${wage}`).then((response) => {\n    setEmployeeList(response.data);\n  });\n};\n//Update an employees name\nconst updateEmployeeName = (id, newName, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateName\", {\n    name: newName,\n    id: id,\n  }).then((response) => {\n    setEmployeeList(\n      employeeList.map((val) => {\n        return val.id == id\n          ? {\n              id: val.id,\n              name: newName,\n              country: val.country,\n              age: val.age,\n              position: val.position,\n              wage: val.wage,\n            }\n          : val;\n      })\n    );\n  });\n};\n//Update an employees age\nconst updateEmployeeAge = (id, newAge, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateAge\", {\n    age: newAge,\n    id: id,\n  }).then((response) => {\n    setEmployeeList(\n      employeeList.map((val) => {\n        return val.id == id\n          ? {\n              id: val.id,\n              name: val.name,\n              country: val.country,\n              age: newAge,\n              position: val.position,\n              wage: val.wage,\n            }\n          : val;\n      })\n    );\n  });\n};\n//Update an employees country\nconst updateEmployeeCountry = (\n  id,\n  newCountry,\n  setEmployeeList,\n  employeeList\n) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateCountry\", {\n    country: newCountry,\n    id: id,\n  }).then((response) => {\n    setEmployeeList(\n      employeeList.map((val) => {\n        return val.id == id\n          ? {\n              id: val.id,\n              name: val.name,\n              country: newCountry,\n              age: val.age,\n              position: val.position,\n              wage: val.wage,\n            }\n          : val;\n      })\n    );\n  });\n};\n//Update an employees position\nconst updateEmployeePosition = (\n  id,\n  newPosition,\n  setEmployeeList,\n  employeeList\n) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updatePosition\", {\n    position: newPosition,\n    id: id,\n  }).then((response) => {\n    setEmployeeList(\n      employeeList.map((val) => {\n        return val.id == id\n          ? {\n              id: val.id,\n              name: val.name,\n              country: val.country,\n              age: val.age,\n              position: newPosition,\n              wage: val.wage,\n            }\n          : val;\n      })\n    );\n  });\n};\n//Update an employees wage\nconst updateEmployeeWage = (id, newWage, setEmployeeList, employeeList) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateWage\", {\n    wage: newWage,\n    id: id,\n  }).then((response) => {\n    setEmployeeList(\n      employeeList.map((val) => {\n        return val.id == id\n          ? {\n              id: val.id,\n              name: val.name,\n              country: val.country,\n              age: val.age,\n              position: val.position,\n              wage: newWage,\n            }\n          : val;\n      })\n    );\n  });\n};\n//Update an employees supervisor\nconst updateEmployeeSupervisor = (\n  id,\n  newManager,\n  setEmployeeList,\n  employeeList\n) => {\n  Axios.put(\"https://employeedatabasesql.herokuapp.com/updateSupervisor\", {\n    wage: newManager,\n    id: id,\n  }).then((response) => {\n    setEmployeeList(\n      employeeList.map((val) => {\n        return val.id == id\n          ? {\n              id: val.id,\n              name: val.name,\n              country: val.country,\n              age: val.age,\n              position: val.position,\n              wage: val.wage,\n              manager: newManager,\n            }\n          : val;\n      })\n    );\n  });\n};\n//Delete an employee\nconst deleteEmployee = (id, setEmployeeList, employeeList) => {\n  Axios.delete(`https://employeedatabasesql.herokuapp.com/delete/${id}`).then((response) => {\n    setEmployeeList(\n      employeeList.filter((val) => {\n        return val.id != id;\n      })\n    );\n  });\n};\n\n//////////////    MANAGERS   //////////////////\n\n//Add a new manager\nconst addManager = (\n  firstName,\n  lastName,\n  empID,\n  setManagerList,\n  managerList,\n  title\n) => {\n  Axios.post(\"https://employeedatabasesql.herokuapp.com/createManager\", {\n    first_name: firstName,\n    last_name: lastName,\n    emp_id: empID,\n    title: title,\n  })\n    .then(() => {\n      setManagerList([\n        ...managerList,\n        {\n          first_name: firstName,\n          last_name: lastName,\n          emp_id: empID,\n          title: title,\n        },\n      ]);\n    })\n    .catch((error) => {\n      console.log(error.response);\n    });\n};\n\n//Get all managers unordered\nconst getManagers = (setManagerList) => {\n  Axios.get(\"/managers\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n\n//Get all managers ordered by first_name ASC\nconst getManagerFirstName = (setManagerList) => {\n  Axios.get(\"/managerFirstName\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by first_name DESC\nconst getManagerFirstNameDesc = (setManagerList) => {\n  Axios.get(\"/managerFirstNameDesc\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n\n//Get all managers ordered by last_name\nconst getManagerLastName = (setManagerList) => {\n  Axios.get(\"/managerLastName\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by last_name DESC\nconst getManagerLastNameDesc = (setManagerList) => {\n  Axios.get(\"/managerLastNameDesc\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n\n//Get all managers ordered by emp_id ASC\nconst getManagersEmpID = (setManagerList) => {\n  Axios.get(\"/managersID\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by emp_id DESC\nconst getManagersEmpIDDesc = (setManagerList) => {\n  Axios.get(\"/managersIDDesc\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by title ASC\nconst getManagersTitle = (setManagerList) => {\n  Axios.get(\"/managersTitle\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get all managers ordered by title DESC\nconst getManagersTitleDesc = (setManagerList) => {\n  Axios.get(\"/managersTitleDesc\").then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get managers by searching a first name\nconst getFirstName = (firstName, setManagerList) => {\n  Axios.get(`/firstName/${firstName}`).then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get managers by searching last name\nconst getLastName = (lastName, setManagerList) => {\n  Axios.get(`/lastName/${lastName}`).then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get employees by searching a ID\nconst getID = (id, setManagerList) => {\n  Axios.get(`/id/${id}`).then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Get manager by searching a title\nconst getTitle = (title, setManagerList) => {\n  Axios.get(`/title/${title}`).then((response) => {\n    setManagerList(response.data);\n  });\n};\n//Update a manager first name\nconst updateManagerFirstName = (\n  manager_id,\n  newFirstName,\n  setManagerList,\n  managerList\n) => {\n  Axios.put(\"/updateManagerFirstName\", {\n    first_name: newFirstName,\n    manager_id: manager_id,\n  }).then((response) => {\n    setManagerList(\n      managerList.map((val) => {\n        return val.manager_id == manager_id\n          ? {\n              manager_id: val.manager_id,\n              first_name: newFirstName,\n              last_name: val.last_name,\n              emp_id: val.emp_id,\n              title: val.title,\n            }\n          : val;\n      })\n    );\n  });\n};\n// Update manager last name\nconst updateManagerLastName = (\n  manager_id,\n  newLastName,\n  setManagerList,\n  managerList\n) => {\n  Axios.put(\"/updateManagerLastName\", {\n    last_name: newLastName,\n    manager_id: manager_id,\n  }).then((response) => {\n    setManagerList(\n      managerList.map((val) => {\n        return val.manager_id == manager_id\n          ? {\n              manager_id: val.manager_id,\n              first_name: val.first_name,\n              last_name: newLastName,\n              emp_id: val.emp_id,\n              title: val.title,\n            }\n          : val;\n      })\n    );\n  });\n};\nconst updateManagerTitle = (\n  manager_id,\n  newTitle,\n  setManagerList,\n  managerList\n) => {\n  Axios.put(\"/updateManagerTitle\", {\n    title: newTitle,\n    manager_id: manager_id,\n  }).then((response) => {\n    setManagerList(\n      managerList.map((val) => {\n        return val.manager_id == manager_id\n          ? {\n              manager_id: val.manager_id,\n              first_name: val.first_name,\n              last_name: val.last_name,\n              emp_id: val.emp_id,\n              title: newTitle,\n            }\n          : val;\n      })\n    );\n  });\n};\n\n// Delete a manager\nconst deleteManager = (id, setManagerList, managerList) => {\n  Axios.delete(`/deleteManager/${id}`).then((response) => {\n    setManagerList(\n      managerList.filter((val) => {\n        return val.id != id;\n      })\n    );\n  });\n};\n\nconst AxiosRoutes = {\n  addEmployee,\n  getEmployees,\n  getEmployeesName,\n  getEmployeesNameDesc,\n  getEmployeesAge,\n  getEmployeesAgeDesc,\n  getEmployeesCountry,\n  getEmployeesCountryDesc,\n  getEmployeesPosition,\n  getEmployeesPositionDesc,\n  getEmployeesWage,\n  getEmployeesWageDesc,\n  getName,\n  getAge,\n  getCountry,\n  getPosition,\n  getWage,\n  updateEmployeeName,\n  updateEmployeeAge,\n  updateEmployeeCountry,\n  updateEmployeePosition,\n  updateEmployeeWage,\n  updateEmployeeSupervisor,\n  deleteEmployee,\n  addManager,\n  getManagers,\n  getManagerFirstName,\n  getManagerFirstNameDesc,\n  getManagerLastName,\n  getManagerLastNameDesc,\n  getManagersEmpID,\n  getManagersEmpIDDesc,\n  getManagersTitle,\n  getManagersTitleDesc,\n  getFirstName,\n  getLastName,\n  getID,\n  getTitle,\n  updateManagerTitle,\n  updateManagerFirstName,\n  updateManagerLastName,\n  deleteManager,\n};\nexport default AxiosRoutes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}